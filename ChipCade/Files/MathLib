# Math.DEG2RAD: Converts degrees to radians
# Inputs:
#   - R0: Angle in degrees
# Outputs:
#   - R1: Angle in radians
# Description:
#   Multiplies the input angle in degrees by π/180 to convert it to radians.
DEG2RAD:
    LDI R1 R0           # Load the input angle (degrees) into R1
    MUL R1 0.0174533f   # Multiply R1 by π/180 to convert to radians
    RET

# Math.RAD2DEG: Converts radians to degrees
# Inputs:
#   - R0: Angle in radians
# Outputs:
#   - R1: Angle in degrees
# Description:
#   Multiplies the input angle in radians by 180/π to convert it to degrees.
RAD2DEG:
    LDI R1 R0           # Load the input angle (radians) into R1
    MUL R1 57.2958f     # Multiply R1 by 180/π to convert to degrees
    RET
    
# Math.PlaceCenteredForward: Place the destination sprite relative to the source sprite.
# Inputs:
#   - R0: Destination Sprite Index
#   - R1: Source Sprite Index
# Outputs: None
# Description:
#   Place the destination sprite in the centered forward position relative to the source sprite.

PlaceCenteredForward:
    # Load source sprite attributes
    LDSPR R2 R1 "x"        # Load the source sprite's X position into R2
    LDSPR R3 R1 "y"        # Load the source sprite's Y position into R3
    LDSPR R4 R1 "width"    # Load the source sprite's width into R4
    LDSPR R5 R1 "height"   # Load the source sprite's height into R5

    # Calculate the center of the source sprite
    DIV R4 2.0f            # Half-width of the source sprite
    ADD R2 R4              # Add half-width to X position for center X
    DIV R5 2.0f            # Half-height of the source sprite
    ADD R3 R5              # Add half-height to Y position for center Y

    # Save source rotation for later
    LDSPR R4 R1 "rotation" # Load the source sprite's rotation (degrees) into R4
    LDI R5 R4              # Copy rotation to R5 for trigonometric calculations
    MUL R5 0.0174533f      # Convert rotation to radians in R5

    # Scale up for higher precision in trigonometric calculations
    LDI R6 1000            # Scaling factor (temporary precision boost)
    MUL R5 R6              # Scale up rotation value before trigonometric operations

    # Calculate the forward offset
    COS R7 R5              # Calculate cosine of scaled rotation angle into R7
    SIN R5 R5              # Calculate sine of scaled rotation angle into R5

    # Scale back down after trigonometric calculations
    DIV R7 1000            # Scale down cosine result
    DIV R5 1000            # Scale down sine result

    # Use source sprite's height for distance
    LDSPR R6 R1 "height"   # Use source sprite's height for forward scaling
    DIV R6 2.0f            # Scale by half-height of the source sprite
    MUL R7 R6              # Scale cosine by forward distance (forward X offset)
    MUL R5 R6              # Scale sine by forward distance (forward Y offset)

    # Apply forward offset to center position
    ADD R2 R7              # Add forward X offset to center X position
    ADD R3 R5              # Add forward Y offset to center Y position

    # Adjust for destination sprite dimensions
    LDSPR R6 R0 "width"    # Load the destination sprite's width into R6
    LDSPR R7 R0 "height"   # Load the destination sprite's height into R7
    DIV R6 2.0f            # Half-width of the destination sprite
    DIV R7 2.0f            # Half-height of the destination sprite
    SUB R2 R6              # Center the X position for the destination sprite
    SUB R3 R7              # Center the Y position for the destination sprite

    # Set the destination sprite position and rotation
    SPRX R0 R2             # Set the destination sprite's X position
    SPRY R0 R3             # Set the destination sprite's Y position
    SPRROT R0 R4           # Apply the source sprite's rotation to the destination sprite

    RET
